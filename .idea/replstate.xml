<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1420848919505">{:repl-history {:ide [], :local [&quot;(System/getProperty \&quot;os.name\&quot;)&quot; &quot;(let [c (chan)\n      begin (System/currentTimeMillis)]\n  (alts!! [c (timeout 100)])\n  (println \&quot;Gave up after\&quot; (- (System/currentTimeMillis) begin)))&quot; &quot;(let [c (chan)\n      begin (System/currentTimeMillis)]\n  (alts!! [c (timeout 1000)])\n  (println \&quot;Gave up after\&quot; (- (System/currentTimeMillis) begin)))&quot; &quot;(let [c (chan)\n      begin (System/currentTimeMillis)]\n  (let [[v c] (alts!! [c (timeout 1000)])]\n    (println \&quot;v \&quot; v \&quot; c \&quot; c)))&quot; &quot;(defn fn1 [c]\n  (let [begin (System/currentTimeMillis)]\n    (let [[v c] (alts!! [c (timeout 10000)])]\n      (println \&quot;v \&quot; v \&quot; c \&quot; c))))&quot; &quot;(require '[clojure.core.async :as async :refer :all])&quot; &quot;(defn fn1 [c]\n  (let [begin (System/currentTimeMillis)]\n    (go\n      (let [[v c] (alts!! [c (timeout 10000)])]\n        (println \&quot;v \&quot; v \&quot; c \&quot; c)))))&quot; &quot;(def c (chan))&quot; &quot;(fn1 c)&quot; &quot;(&gt;!! c :stop)&quot; &quot;(-&gt;&gt; [\&quot;~/Documents/books\&quot; \&quot;~/Documents/workspace\&quot;] (mapcat (comp file-seq io/file)) (filter (memfn .isFile)))&quot; &quot;(-&gt;&gt; [\&quot;~/Documents/books\&quot; \&quot;~/Documents/workspace\&quot;] (mapcat (comp file-seq io/file)) (filter (memfn isFile)))&quot; &quot;(-&gt;&gt; [\&quot;/Users/jwin/Documents/books\&quot; \&quot;/Users/jwin/Documents/workspace\&quot;] (mapcat (comp file-seq io/file)) (filter (memfn isFile)))&quot; &quot;(-&gt;&gt; [\&quot;/Users/jwin/Documents/books\&quot; \&quot;/Users/jwin/Documents/workspace\&quot;] (mapcat (comp file-seq io/file)) (filter (memfn isFile)) str)&quot; &quot;(-&gt;&gt; [\&quot;/Users/jwin/Documents/books\&quot; \&quot;/Users/jwin/Documents/workspace\&quot;] (mapcat (comp file-seq io/file)) (filter (memfn isFile)) (map .name))&quot; &quot;(-&gt;&gt; [\&quot;/Users/jwin/Documents/books\&quot; \&quot;/Users/jwin/Documents/workspace\&quot;] (mapcat (comp file-seq io/file)) (filter (memfn isFile)) (map name))&quot; &quot;(-&gt;&gt; [\&quot;/Users/jwin/Documents/books\&quot; \&quot;/Users/jwin/Documents/workspace\&quot;] (mapcat (comp file-seq io/file)) (filter (memfn isFile)) (map getPath))&quot; &quot;(-&gt;&gt; [\&quot;/Users/jwin/Documents/books\&quot; \&quot;/Users/jwin/Documents/workspace\&quot;] (mapcat (comp file-seq io/file)) (filter (memfn isFile)) )&quot; &quot;(-&gt;&gt; [\&quot;/Users/jwin/Documents/workspace\&quot;] (mapcat (comp file-seq io/file)) (filter (memfn isFile)) )&quot; &quot;(-&gt;&gt; [\&quot;/Users/jwin/Documents/books\&quot; \&quot;/Users/jwin/Documents/workspace\&quot;] (mapcat (comp file-seq io/file)) (filter (memfn isDir)))&quot; &quot;(-&gt;&gt; [\&quot;/Users/jwin/Documents/books\&quot; \&quot;/Users/jwin/Documents/workspace\&quot;] (mapcat (comp file-seq io/file)) (filter (memfn isDirectory)))&quot; &quot;(-&gt;&gt; [\&quot;/Users/jwin/Documents/workspace\&quot; \&quot;/Users/jwin/Documents/books\&quot;] (mapcat (comp file-seq io/file)) (filter (memfn isDirectory)))&quot; &quot;(-&gt;&gt; [\&quot;/Users/jwin/Documents/workspace\&quot; \&quot;/Users/jwin/Documents/books\&quot;] (mapcat (comp file-seq io/file)) (filter (memfn isDirectory)) (map toString))&quot; &quot;(-&gt;&gt; [\&quot;/Users/jwin/Documents/workspace\&quot; \&quot;/Users/jwin/Documents/books\&quot;] (mapcat (comp file-seq io/file)) (filter #(.isDirectory %)) (map #(.toString %)))&quot; &quot;(-&gt;&gt; [\&quot;/Users/jwin/Documents/workspace\&quot; \&quot;/Users/jwin/Documents/books\&quot;] (mapcat (comp file-seq io/file)) (filter #(.isDirectory %)) (map #(str (.toString %) \&quot;\\n\&quot;)))&quot; &quot;(doseq (-&gt;&gt; [\&quot;/Users/jwin/Documents/workspace\&quot; \&quot;/Users/jwin/Documents/books\&quot;] (mapcat (comp file-seq io/file)) (filter #(.isDirectory %))) (println #(str (.toString %) \&quot;\\n\&quot;)))&quot; &quot;(doseq [file (-&gt;&gt; [\&quot;/Users/jwin/Documents/workspace\&quot; \&quot;/Users/jwin/Documents/books\&quot;] (mapcat (comp file-seq io/file)) (filter #(.isDirectory %)))]\n  (println (str (.toString file) \&quot;\\n\&quot;)))&quot; &quot;(doseq [file (-&gt;&gt; [\&quot;/Users/jwin/Documents/workspace\&quot; \&quot;/Users/jwin/Documents/books\&quot;] (mapcat (comp file-seq io/file)) (filter #(.isDirectory %)))]\n  (println (.toString file)))&quot; &quot;(doseq [file (-&gt;&gt; [\&quot;/Users/jwin/Documents/workspace\&quot; \&quot;/Users/jwin/Documents/books\&quot;] (mapcat (comp file-seq io/file)) (filter #(.isFile %)))]\n  (println (.toString file)))&quot;], :remote []}}</component>
</project>